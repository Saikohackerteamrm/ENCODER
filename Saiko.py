import base64
exec(base64.b64decode('Iy0tLS0tLS0tLS0tLS0tLS0tLS0tLeKXjyBJTVBPUlQg4pePLS0tLS0tLS0tLS0tLS0tLS0tLS0tIw0KaW1wb3J0IGN5dGhvbiwgb3MsIHRpbWUsIG1hcnNoYWwsIHNodXRpbCwgcmUNCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS3il48gQ09MT1VSIOKXjy0tLS0tLS0tLS0tLS0tLS0tLS0tLSMNCkc9Ilx4MWJbMzg7NTs0Nm0iO1c9Ilx4MWJbMzg7NTsxNW0iO0I9Ilx4MWJbMzg7NTsyNjVtIjtZPSJceDFiWzM4OzU7MjI2bSI7QT0iXHgxYlszODs1OzEyM20iO1I9Ilx4MWJbMzg7NTsxNjBtIjtPPSJceDFiWzM4OzU7ODFtIg0KIy0tLS0tLS0tLS0tLS0tLS0tLS0tLeKXjyBTVFlMRSDil48tLS0tLS0tLS0tLS0tLS0tLS0tLS0jDQp4ZD1mIntHfT57WX0+e1d9Ijt4ZDE9ZiJ7R30we1l9MXtXfSI7eGQyPWYie0d9MHtZfTJ7V30iO3hkMz1mIntHfTB7WX0ze1d9Ig0KIy0tLS0tLS0tLS0tLS0tLS0tLS0tLeKXjyBDTEVBUiDil48tLS0tLS0tLS0tLS0tLS0tLS0tLS0jDQpkZWYgY2VudGVyKHRleHQpOg0KICAgIHRyeTogY29sdW1ucyA9IHNodXRpbC5nZXRfdGVybWluYWxfc2l6ZSgpLmNvbHVtbnMNCiAgICBleGNlcHQ6IGNvbHVtbnMgPSA4MA0KICAgIHJldHVybiAnXG4nLmpvaW4obGluZS5jZW50ZXIoY29sdW1ucykgZm9yIGxpbmUgaW4gdGV4dC5zcGxpdCgnXG4nKSkNCg0KZGVmIGNsZWFyKCk6DQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgcHJpbnQoY2VudGVyKGxvZ28pKQ0KDQpkZWYgbGluZXgoKToNCiAgICBwcmludChmJ3tSfeKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCcpDQoNCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS3il48gTE9HTyDil48tLS0tLS0tLS0tLS0tLS0tLS0tLS0jDQpsb2dvPShmIiIiDQp7Qn0gXyB7QX0gXyB7Qn0gICB7QX1cIC8ge0F9fHtCfSBPV05FUiAge0J9OntCfSBSTSBSb255IEFsaSANCntCfXxfKXtBfS8gXHtCfXxcfHtBfSBZIHtBfSB8e0J9IFRPT0xTICB7QX06e0J9IE1BUlNIQUwge0F9fHtBfSBDWVRIT04gRU5DL0RFQw0Ke0J9fCBce1l9XF8ve0F9fCB8e0J9IHwgIHtBfXx7Qn0gU1RBVFVTIHtBfTp7Qn0gRntBfUF7Qn1JRA0Ke1J94pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIiIiKQ0KDQoNCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS3il48gTUFJTiBNRU5VIOKXjy0tLS0tLS0tLS0tLS0tLS0tLS0tLSMNCmRlZiBfX19zd2FnX19fKCk6DQogICAgY2xlYXIoKQ0KICAgIHByaW50KGNlbnRlcihmInt4ZDF9IFNUQVJUIENZVEhPTiBFTkNPREUgIikpDQogICAgcHJpbnQoY2VudGVyKGYie3hkMn0gU1RBUlQgTUFSU0hBTCBFTkNPREUgIikpDQogICAgcHJpbnQoY2VudGVyKGYie3hkM30gU1RBUlQgTUFSU0hBTCBERUNPREUgIikpDQogICAgbGluZXgoKQ0KICAgIG9wdGlvbiA9IGlucHV0KGYie3hkfSBTRUxFQ1QgOiAiKQ0KICAgIGlmIG9wdGlvbiA9PSAiMSI6IF9fX2N5dGhvbnhfX18oKQ0KICAgIGVsaWYgb3B0aW9uID09ICIyIjogX19fbWFyc2hhbHhfX18oKQ0KICAgIGVsaWYgb3B0aW9uID09ICIzIjogX19fbWFyc2hhbF9kZWNvZGVfX18oKQ0KICAgIGVsc2U6DQogICAgICAgIGxpbmV4KCkNCiAgICAgICAgcHJpbnQoZiJ7eGR9IE9QVElPTiBOT1QgRk9VTkQgIikNCiAgICAgICAgbGluZXgoKQ0KICAgICAgICB0aW1lLnNsZWVwKDEpDQogICAgICAgIHByaW50KGYie3hkfSBUUlkgQUdBSU4gQlJPVEhFUiIpDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgICAgX19fc3dhZ19fXygpDQoNCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS3il48gQ1lUSE9OIOKXjy0tLS0tLS0tLS0tLS0tLS0tLS0tLSMNCmRlZiBfX19jeXRob254X19fKCk6DQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYie3hkfSBFWEFNUExFIDogUk9OWS5weSB7WX18e1d9IE1JVEhJTEEucHkge1l9fHtXfSBSTS5weSAiKQ0KICAgIGxpbmV4KCkNCiAgICBlbmNmaWxleCA9IGlucHV0KGYie3hkfSBFTlRFUiBZT1VSIEZJTEUgTkFNRSA6ICIpDQogICAgY2xlYXIoKQ0KICAgIHByaW50KGYie3hkfSBXQUlUSU5HIEZPUiBDWVRIT04gRU5DT0RFIikNCiAgICBsaW5leCgpDQogICAgb3Muc3lzdGVtKGYiY3l0aG9uaXplIC1iIHtlbmNmaWxleH0iKQ0KICAgIGxpbmV4KCkNCiAgICBwcmludChmInt4ZH0gU1VDQ0VTU0ZVTCBDWVRIT04gRU5DT0RFIikNCiAgICBleGl0KCkNCg0KIy0tLS0tLS0tLS0tLS0tLS0tLS0tLeKXjyBNQVJTSEFMIEVOQ09ERSDil48tLS0tLS0tLS0tLS0tLS0tLS0tLS0jDQpkZWYgX19fbWFyc2hhbHhfX18oKToNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZiJ7eGR9IEVYQU1QTEUgOiAvc2RjYXJkL1JPTlkucHkge1l9fHtXfSAvc2RjYXJkL01JVEhJTEEucHkgIikNCiAgICBsaW5leCgpDQogICAgeCA9IGlucHV0KGYie3hkfSBFTlRFUiBZT1VSIEZJTEUgTkFNRSA6ICIpIA0KICAgIHRyeToNCiAgICAgICAgcSA9IHguc3BsaXQoJy4nKQ0KICAgICAgICB1ID0gcVswXSArICJfZW5jLnB5Ig0KICAgIGV4Y2VwdDoNCiAgICAgICAgdSA9IGlucHV0KGYie3hkfSBFTlRFUiBZT1VSIEZJTEUgU0FWRSBOQU1FIDogIikNCiAgICBmID0gaW50KGlucHV0KGYie3hkfSBFTkNPREUgQ09VTlQgTElNSVQgOiAiKSkNCiAgICBsaW5leCgpDQogICAgYSA9IG9wZW4oeCkucmVhZCgpDQogICAgdHJ5Og0KICAgICAgICBqID0gMA0KICAgICAgICBmb3IgaSBpbiByYW5nZShmKToNCiAgICAgICAgICAgIGogKz0gMQ0KICAgICAgICAgICAgbSA9IGNvbXBpbGUoYSwgJyAnLCAnZXhlYycpDQogICAgICAgICAgICBrID0gbWFyc2hhbC5kdW1wcyhtKQ0KICAgICAgICAgICAgdCA9ICcjRU5DT0RFRCBCeSA6IFRFQU0gUy1ILVRcbiNFTkNSWVBUSU9OIDogUFkzIE1BUlNIQUxcblxuaW1wb3J0IG1hcnNoYWxcbmV4ZWMobWFyc2hhbC5sb2FkcygnK3JlcHIoaykrJykpJw0KICAgICAgICAgICAgdGltZS5zbGVlcCgwLjAwNCkNCiAgICAgICAgICAgIHByaW50KGYie3hkfSBFTkNPREUgQ09VTlQgOntHfSAiICsgc3RyKGopKQ0KICAgIGV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgICAgICBleGl0KGYie3hkfSBXUk9ORyBJTlBVVCBWQUxVRSIpDQogICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICBleGl0KGYie3hkfSBGSUxFICIgKyB4ICsgIiBOT1QgRk9VTkQiKQ0KICAgIGxpbmV4KCkNCiAgICBsID0gb3Blbih1LCAndycpDQogICAgbC53cml0ZSh0KQ0KICAgIGwuY2xvc2UoKQ0KICAgIHByaW50KGYie3hkfSBZT1VSIEVOQ09ERSBGSUxFIFNBVkUgQVMgOntHfSAiICsgdSkNCg0KIy0tLS0tLS0tLS0tLS0tLS0tLS0tLeKXjyBNQVJTSEFMIERFQ09ERSDil48tLS0tLS0tLS0tLS0tLS0tLS0tLS0jDQpkZWYgX19fbWFyc2hhbF9kZWNvZGVfX18oKToNCiAgICBjbGVhcigpDQogICAgcHJpbnQoZiJ7eGR9IEVYQU1QTEUgOiAvc2RjYXJkL2ZpbGVfZW5jLnB5IikNCiAgICBsaW5leCgpDQogICAgZmlsZW5hbWUgPSBpbnB1dChmInt4ZH0gRU5URVIgTUFSU0hBTCBFTkNPREVEIEZJTEUgOiAiKQ0KICAgIHRyeToNCiAgICAgICAgd2l0aCBvcGVuKGZpbGVuYW1lLCAiciIpIGFzIGY6DQogICAgICAgICAgICBjb250ZW50ID0gZi5yZWFkKCkNCiAgICAgICAgcGF0dGVybiA9IHIibWFyc2hhbFwubG9hZHNcKCguKz8pXCkiDQogICAgICAgIG1hdGNoID0gcmUuc2VhcmNoKHBhdHRlcm4sIGNvbnRlbnQpDQogICAgICAgIGlmIG5vdCBtYXRjaDoNCiAgICAgICAgICAgIGV4aXQoZiJ7eGR9IElOVkFMSUQgTUFSU0hBTCBGSUxFIEZPUk1BVCIpDQogICAgICAgIGVuY29kZWQgPSBldmFsKG1hdGNoLmdyb3VwKDEpKQ0KICAgICAgICBjb2RlID0gbWFyc2hhbC5sb2FkcyhlbmNvZGVkKQ0KICAgICAgICBkZWNvZGVkID0gZiIjREVDT0RFRCBCeSA6IFRFQU0gUy1ILVRcblxue2NvZGUuY29fY29uc3RzWzBdfSINCiAgICAgICAgb3V0cHV0ID0gZmlsZW5hbWUucmVwbGFjZSgiLnB5IiwgIl9kZWNvZGVkLnB5IikNCiAgICAgICAgd2l0aCBvcGVuKG91dHB1dCwgInciKSBhcyBvdXQ6DQogICAgICAgICAgICBvdXQud3JpdGUoZGVjb2RlZCkNCiAgICAgICAgbGluZXgoKQ0KICAgICAgICBwcmludChmInt4ZH0gREVDT0RFRCBGSUxFIFNBVkVEIEFTIDp7R30ge291dHB1dH0iKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgbGluZXgoKQ0KICAgICAgICBwcmludChmInt4ZH0gRVJST1IgOiB7Un17c3RyKGUpfSIpDQoNCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS3il48gU1RBUlQg4pePLS0tLS0tLS0tLS0tLS0tLS0tLS0tIw0KX19fc3dhZ19fXygp'))